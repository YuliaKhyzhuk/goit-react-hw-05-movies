{"version":3,"file":"static/js/247.c9b1983d.chunk.js","mappings":"kOA0DA,UApDa,WACX,OAAkCA,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KA0BA,OAtBAC,EAAAA,EAAAA,YAAU,WACR,GAAKN,EAAL,CAEA,IAAMO,EAAmB,mCAAG,WAAMP,GAAN,uFAExBG,GAAa,GAFW,UAGDK,EAAAA,EAAAA,IAAgBR,GAHf,OAGlBS,EAHkB,OAKxBV,EAAaU,EAASC,MALE,gDAOxBL,EAAS,KAAMM,SACfC,QAAQC,IAAI,mBAAoB,KAAMF,SARd,yBAUxBR,GAAa,GAVW,4EAAH,sDAazBI,EAAoBP,EAfA,CAgBrB,GAAE,CAACA,IAEJY,QAAQC,IAAIb,GACZY,QAAQC,IAAI,aAAcf,IAGxB,2BACGI,IAAa,SAAC,IAAD,IAEbE,IAAS,oEAEV,wBACGN,EAAUgB,OAAS,GAAKhB,EAAUiB,KAAI,SAAAC,GAEnC,OACI,2BACI,wBAAKA,EAAMC,QACX,gBAAKC,IAAKF,EAAMG,aAAN,yCAAuDH,EAAMG,cApCtE,0DAoCmGC,IAAKJ,EAAMC,KAAMI,MAAM,WAC3H,uBAAIL,EAAMM,cAHLN,EAAMO,GAMtB,QAIR,C,+LCtDDC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCACVC,EAAW,QAEJC,EAAiB,mCAAG,sGACRH,EAAAA,EAAAA,IAAA,sBAAiC,CACtDI,OAAQ,CAAEC,QAASJ,EAASK,SAAUJ,KAFT,cACzBjB,EADyB,OAK/BG,QAAQC,IAAI,qBAAsBJ,GAC1BsB,EAAStB,EAATsB,KANuB,kBAQxBA,GARwB,2CAAH,qDAWjBC,EAAe,mCAAG,WAAOC,GAAP,8FAAcC,EAAd,+BAAqB,EAArB,SACJV,EAAAA,EAAAA,IAAA,gBAA2B,CAChDI,OAAQ,CAAEC,QAASJ,EAASK,SAAUJ,EAAUQ,KAAAA,EAAMD,MAAAA,KAF7B,cACrBxB,EADqB,OAK3BG,QAAQC,IAAI,yBAA0BJ,GAC9BsB,EAAStB,EAATsB,KANmB,kBAOpBA,GAPoB,2CAAH,sDAUfI,EAAY,mCAAG,WAAMnC,GAAN,yFACDwB,EAAAA,EAAAA,IAAA,iBAAoBxB,GAAW,CACpD4B,OAAQ,CAAEC,QAASJ,EAASK,SAAUJ,KAFhB,cAClBjB,EADkB,OAKxBG,QAAQC,IAAI,yBAA0BJ,GAC9BsB,EAAStB,EAATsB,KANgB,kBAOjBA,GAPiB,2CAAH,sDAUZvB,EAAe,mCAAG,WAAMR,GAAN,yFACJwB,EAAAA,EAAAA,IAAA,iBAAoBxB,EAApB,YAAuC,CAC5D4B,OAAQ,CAAEC,QAASJ,EAASK,SAAUJ,KAFb,cACrBjB,EADqB,OAK3BG,QAAQC,IAAI,4BAA6BJ,GACjCsB,EAAStB,EAATsB,KANmB,kBAOpBA,GAPoB,2CAAH,sDAWfK,EAAe,mCAAG,WAAMpC,GAAN,yFACNwB,EAAAA,EAAAA,IAAA,iBAAoBxB,EAApB,YAAuC,CAC5D4B,OAAQ,CAAEC,QAASJ,EAASK,SAAUJ,EAAUQ,KAAM,KAF3B,cACvBzB,EADuB,OAK7BG,QAAQC,IAAI,4BAA6BJ,GACjCsB,EAAStB,EAATsB,KANqB,kBAOtBA,GAPsB,2CAAH,qD","sources":["components/Cast/Cast.jsx","services/themoviedbApi.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from '../../services/themoviedbApi';\n\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const defaultImg = 'https://cdn-icons-png.flaticon.com/512/2922/2922506.png';\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const getMovieCastFromApi = async movieId => {\n      try {\n        setIsLoading(true);\n        const response = await getMovieCredits(movieId);\n        // setMovieById(response.results);\n        setMovieCast(response.cast);\n      } catch (error) {\n        setError(error.message);\n        console.log('getMovieCredits:', error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovieCastFromApi(movieId);\n  }, [movieId]);\n\n  console.log(movieId);\n  console.log(\"movieCast:\", movieCast);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n\n      {error && <p>Something went wrong! Please try again!</p>}\n\n      <ul>\n        {movieCast.length > 0 && movieCast.map(actor => {\n            // console.log(\"actor:\", actor);\n            return (\n                <li key={actor.id}>\n                    <h4>{actor.name}</h4>\n                    <img src={actor.profile_path ? `https://image.tmdb.org/t/p/w200${actor.profile_path}` : defaultImg} alt={actor.name} width=\"240px\" />\n                    <p>{actor.character}</p>\n                </li>\n            )\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'f687d24021b781b06892bcf3760eb617';\nconst LANGUAGE = 'en-US';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day`, {\n    params: { api_key: API_KEY, language: LANGUAGE, },\n  });\n\n  console.log('getTrendingMovies:', response);\n  const { data } = response;\n\n  return data;\n};\n\nexport const getMovieByQuery = async (query, page = 1) => {\n    const response = await axios.get(`/search/movie`, {\n      params: { api_key: API_KEY, language: LANGUAGE, page, query, },\n    });\n  \n    console.log('getMovieById response:', response);\n    const { data } = response;\n    return data;\n  };\n\nexport const getMovieById = async movieId => {\n    const response = await axios.get(`/movie/${movieId}`, {\n      params: { api_key: API_KEY, language: LANGUAGE},\n    });\n  \n    console.log('getMovieById response:', response);\n    const { data } = response;\n    return data;\n  };\n\nexport const getMovieCredits = async movieId => {\n    const response = await axios.get(`/movie/${movieId}/credits`, {\n      params: { api_key: API_KEY, language: LANGUAGE, },\n    });\n  \n    console.log('getMovieCredits response:', response);\n    const { data } = response;\n    return data;\n  };\n\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, {\n    params: { api_key: API_KEY, language: LANGUAGE, page: 1 },\n  });\n\n  console.log('getMovieReviews response:', response);\n  const { data } = response;\n  return data;\n  // console.log(\"getMovieReviews data:\", data);\n  // console.log(data);\n};\n"],"names":["useState","movieCast","setMovieCast","movieId","useParams","isLoading","setIsLoading","error","setError","useEffect","getMovieCastFromApi","getMovieCredits","response","cast","message","console","log","length","map","actor","name","src","profile_path","alt","width","character","id","axios","API_KEY","LANGUAGE","getTrendingMovies","params","api_key","language","data","getMovieByQuery","query","page","getMovieById","getMovieReviews"],"sourceRoot":""}