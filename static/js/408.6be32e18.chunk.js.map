{"version":3,"file":"static/js/408.6be32e18.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.jsx","pages/MovieDetails/MovieDetails.jsx","services/themoviedbApi.jsx"],"sourcesContent":["import React from \"react\";\n\nexport const MovieCard = ({movie}) => {\n    const { release_date, poster_path, overview, title, vote_average, genres  } = movie;\n    const year = parseInt(release_date);\n\n    return (\n        <div>\n            <img src={`https://image.tmdb.org/t/p/original/${poster_path}`} alt={overview} width=\"370px\"/>\n            <div>\n                <h2>{title}</h2>\n                <p>Year: {year}</p>\n                <p>User score: {vote_average}</p>\n\n                <h3>Overview</h3>\n                <p>{overview}</p>\n\n                {genres && <><h3>Genres</h3><p>{genres.map(genre => genre.name).join(', ')}</p></>\n                }\n            </div>\n    </div>\n    )\n}\n\nexport default MovieCard;\n","import React, { useState, useEffect } from 'react';\nimport { Outlet, useLocation, useParams, NavLink } from 'react-router-dom';\nimport { getMovieById } from '../../services/themoviedbApi';\n\nimport { Loader } from 'components/Loader/Loader';\nimport { MovieCard } from 'components/MovieCard/MovieCard';\n\nexport const MovieDetails = () => {\n  const [movieById, setMovieById] = useState([]);\nconst { movieId } = useParams();\n// console.log('kjhkj', movieId);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const location = useLocation();\n  const goBackLink = location.state?.from ?? '/';\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const getMovieByIdFromApi = async (movieId) => {\n      try {\n        setIsLoading(true);\n        const response = await getMovieById(movieId);\n        // setMovieById(response.results);\n        setMovieById(response);\n\n      } catch (error) {\n        setError(error.message);\n        console.log('getMovieById:', error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovieByIdFromApi(movieId);\n  }, [movieId]);\n\n  return (\n    <div>\n      <div>\n        <NavLink to={goBackLink}>Go back</NavLink>\n      </div>\n      <div>\n        {isLoading && <Loader />}\n\n        {error && <p>Something went wrong! Please try again!</p>}\n\n        {movieById && <MovieCard movie={movieById} />}\n        <div>\n        <h3>Additional Information</h3>\n        <NavLink to=\"cast\" state={{from: goBackLink}}>Cast</NavLink>\n        <NavLink to=\"reviews\" state={{from: goBackLink}}>Reviews</NavLink>\n        </div>\n        <Outlet />\n      </div>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'f687d24021b781b06892bcf3760eb617';\nconst LANGUAGE = 'en-US';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day`, {\n    params: { api_key: API_KEY, language: LANGUAGE, },\n  });\n\n  console.log('getTrendingMovies:', response);\n  const { data } = response;\n\n  return data;\n};\n\nexport const getMovieByQuery = async (query, page = 1) => {\n    const response = await axios.get(`/search/movie`, {\n      params: { api_key: API_KEY, language: LANGUAGE, page, query, },\n    });\n  \n    console.log('getMovieById response:', response);\n    const { data } = response;\n    return data;\n  };\n\nexport const getMovieById = async movieId => {\n    const response = await axios.get(`/movie/${movieId}`, {\n      params: { api_key: API_KEY, language: LANGUAGE},\n    });\n  \n    console.log('getMovieById response:', response);\n    const { data } = response;\n    return data;\n  };\n\nexport const getMovieCredits = async movieId => {\n    const response = await axios.get(`/movie/${movieId}/credits`, {\n      params: { api_key: API_KEY, language: LANGUAGE, },\n    });\n  \n    console.log('getMovieCredits response:', response);\n    const { data } = response;\n    return data;\n  };\n\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, {\n    params: { api_key: API_KEY, language: LANGUAGE, page: 1 },\n  });\n\n  console.log('getMovieReviews response:', response);\n  const { data } = response;\n  return data;\n  // console.log(\"getMovieReviews data:\", data);\n  // console.log(data);\n};\n"],"names":["MovieCard","movie","release_date","poster_path","overview","title","vote_average","genres","year","parseInt","src","alt","width","map","genre","name","join","MovieDetails","useState","movieById","setMovieById","movieId","useParams","isLoading","setIsLoading","error","setError","goBackLink","useLocation","state","from","useEffect","getMovieByIdFromApi","getMovieById","response","message","console","log","to","Loader","axios","API_KEY","LANGUAGE","getTrendingMovies","params","api_key","language","data","getMovieByQuery","query","page","getMovieCredits","getMovieReviews"],"sourceRoot":""}