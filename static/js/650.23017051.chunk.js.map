{"version":3,"file":"static/js/650.23017051.chunk.js","mappings":"2MAKaA,EAAY,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAC5BC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,2BACGF,IAAS,wBAAKA,KACf,yBACS,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQI,SACPJ,EAAOK,KAAI,SAAAC,GACV,OAAQ,yBACP,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMR,GAAhD,SACGI,EAAML,SAFOK,EAAME,GAKvB,QAIV,C,mLCpBYG,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAkBA,OACE,kBAAMH,SAjBa,SAAAI,GACnBA,EAAMC,iBAEe,KAAjBH,EAAMI,QAKVN,EAASE,GACTC,EAAS,KALLI,MAAM,wBAMb,EAOG,WACE,kBAAOC,KAAK,OAAOC,KAAK,QAAQC,MAAM,QAAQC,YAAY,gBAAgBC,aAAa,MAAMC,WAAS,EAACC,SANjF,SAAAV,GAC5BD,EAASC,EAAMW,cAAcL,MAAMM,cAChC,KAKG,mBAAQR,KAAK,SAAb,sBAGL,E,SCrBYS,EAAS,WACpB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCnB,EAAAA,EAAAA,WAAS,GAA3C,eAAOoB,EAAP,KAAkBC,EAAlB,KACA,GAA0BrB,EAAAA,EAAAA,UAAS,MAAnC,eAAOsB,EAAP,KAAcC,EAAd,KACA,GAA4BvB,EAAAA,EAAAA,UAAS,IAArC,eAAOb,EAAP,KAAeqC,EAAf,KAEMvB,EAAQiB,EAAaO,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACR,GAAKzB,EAAL,CAEA,IAAM0B,EAAsB,mCAAG,WAAO1B,GAAP,uFAE3BoB,GAAa,GAFc,UAGJO,EAAAA,EAAAA,IAAgB3B,GAHZ,OAGrB4B,EAHqB,OAI3BL,EAAUK,EAASC,SAJQ,gDAM3BP,EAAS,KAAMQ,SACfC,QAAQC,IAAI,yBAA0B,KAAMF,SAPjB,yBAS3BV,GAAa,GATc,4EAAH,sDAY5BM,GAdkB,CAenB,GAAE,CAAC1B,IAUJ,OACE,4BACE,SAACH,EAAD,CAAWC,SAVgB,SAAAE,GAI7BkB,EAAgB,CAAElB,MAAAA,GAEnB,IAMImB,IAAa,SAACc,EAAA,EAAD,IAEH,IAAVZ,IAAe,mEAEfnC,EAAOI,OAAS,IAAK,SAACL,EAAA,EAAD,CAAWC,OAAQA,EAAQC,MAAO,mBAEvDa,GAA2B,IAAlBd,EAAOI,SACf,yEAIP,EAED,G,+LCxDA4C,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCACVC,EAAW,QAEJC,EAAiB,mCAAG,sGACRH,EAAAA,EAAAA,IAAA,sBAAiC,CACtDI,OAAQ,CAAEC,QAASJ,EAASK,SAAUJ,KAFT,cACzBR,EADyB,OAK/BG,QAAQC,IAAI,qBAAsBJ,GAC1Ba,EAASb,EAATa,KANuB,kBAQxBA,GARwB,2CAAH,qDAWjBd,EAAe,mCAAG,WAAO3B,GAAP,8FAAc0C,EAAd,+BAAqB,EAArB,SACJR,EAAAA,EAAAA,IAAA,gBAA2B,CAChDI,OAAQ,CAAEC,QAASJ,EAASK,SAAUJ,EAAUM,KAAAA,EAAM1C,MAAAA,KAF7B,cACrB4B,EADqB,OAK3BG,QAAQC,IAAI,yBAA0BJ,GAC9Ba,EAASb,EAATa,KANmB,kBAOpBA,GAPoB,2CAAH,sDAUfE,EAAY,mCAAG,WAAMC,GAAN,yFACDV,EAAAA,EAAAA,IAAA,iBAAoBU,GAAW,CACpDN,OAAQ,CAAEC,QAASJ,EAASK,SAAUJ,KAFhB,cAClBR,EADkB,OAKxBG,QAAQC,IAAI,yBAA0BJ,GAC9Ba,EAASb,EAATa,KANgB,kBAOjBA,GAPiB,2CAAH,sDAUZI,EAAe,mCAAG,WAAMD,GAAN,yFACJV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,YAAuC,CAC5DN,OAAQ,CAAEC,QAASJ,EAASK,SAAUJ,KAFb,cACrBR,EADqB,OAK3BG,QAAQC,IAAI,4BAA6BJ,GACjCa,EAASb,EAATa,KANmB,kBAOpBA,GAPoB,2CAAH,sDAWfK,EAAe,mCAAG,WAAMF,GAAN,yFACNV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,YAAuC,CAC5DN,OAAQ,CAAEC,QAASJ,EAASK,SAAUJ,EAAUM,KAAM,KAF3B,cACvBd,EADuB,OAK7BG,QAAQC,IAAI,4BAA6BJ,GACjCa,EAASb,EAATa,KANqB,kBAOtBA,GAPsB,2CAAH,qD","sources":["components/MovieList/MovieList.jsx","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.jsx","services/themoviedbApi.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const MovieList = ({ movies, title }) => {\n  const location = useLocation();\n\n  return (\n    <div>\n      {title && <h2>{title}</h2>}\n      <ul>\n        {movies?.length &&\n          movies.map(movie => {\n           return (<li key={movie.id}>\n            <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n              {movie.title}\n            </Link>\n          </li>); \n          })}\n      </ul>\n    </div>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.shape({id: PropTypes.number.isRequired})).isRequired,\n};\n\nexport default MovieList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Searchbar = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (query.trim() === '') {\n        alert('Please enter a query!');\n        return;\n    }\n\n    onSubmit(query);\n    setQuery('');    \n};\n\n  const handleQueryChange = event => {\nsetQuery(event.currentTarget.value.toLowerCase());\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" name=\"query\" value=\"query\" placeholder=\"Search movies\" autoComplete='off' autofocus onChange={handleQueryChange} />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieByQuery } from '../../services/themoviedbApi';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { Searchbar } from 'components/Searchbar/Searchbar';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [movies, setMovies] = useState([]);\n\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) return;\n\n    const getMovieByQueryFromApi = async (query) => {\n      try {\n        setIsLoading(true);\n        const response = await getMovieByQuery(query);\n        setMovies(response.results);\n      } catch (error) {\n        setError(error.message);\n        console.log('getMovieByQuery error:', error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovieByQueryFromApi();\n  }, [query]);\n\n  const handleSearchFormSubmit = query => {\n    // event.preventDefault();\n    // console.log('query on submit:', event.currentTarget.elements.query);\n    // setSearchParams({ query: query });\n    setSearchParams({ query });\n\n  };\n\n  return (\n    <div>\n      <Searchbar onSubmit={handleSearchFormSubmit} />\n\n      {isLoading && <Loader />}\n\n      {error !== 0 && <p>Something went wrong! Please try again!</p>}\n\n      {movies.length > 0 && <MovieList movies={movies} title={'Trending today'} />}\n\n      {query && movies.length === 0 && (\n        <p>No movies found! Please try another title! </p>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'f687d24021b781b06892bcf3760eb617';\nconst LANGUAGE = 'en-US';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day`, {\n    params: { api_key: API_KEY, language: LANGUAGE, },\n  });\n\n  console.log('getTrendingMovies:', response);\n  const { data } = response;\n\n  return data;\n};\n\nexport const getMovieByQuery = async (query, page = 1) => {\n    const response = await axios.get(`/search/movie`, {\n      params: { api_key: API_KEY, language: LANGUAGE, page, query, },\n    });\n  \n    console.log('getMovieById response:', response);\n    const { data } = response;\n    return data;\n  };\n\nexport const getMovieById = async movieId => {\n    const response = await axios.get(`/movie/${movieId}`, {\n      params: { api_key: API_KEY, language: LANGUAGE},\n    });\n  \n    console.log('getMovieById response:', response);\n    const { data } = response;\n    return data;\n  };\n\nexport const getMovieCredits = async movieId => {\n    const response = await axios.get(`/movie/${movieId}/credits`, {\n      params: { api_key: API_KEY, language: LANGUAGE, },\n    });\n  \n    console.log('getMovieCredits response:', response);\n    const { data } = response;\n    return data;\n  };\n\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, {\n    params: { api_key: API_KEY, language: LANGUAGE, page: 1 },\n  });\n\n  console.log('getMovieReviews response:', response);\n  const { data } = response;\n  return data;\n  // console.log(\"getMovieReviews data:\", data);\n  // console.log(data);\n};\n"],"names":["MovieList","movies","title","location","useLocation","length","map","movie","to","id","state","from","Searchbar","onSubmit","useState","query","setQuery","event","preventDefault","trim","alert","type","name","value","placeholder","autoComplete","autofocus","onChange","currentTarget","toLowerCase","Movies","useSearchParams","searchParams","setSearchParams","isLoading","setIsLoading","error","setError","setMovies","get","useEffect","getMovieByQueryFromApi","getMovieByQuery","response","results","message","console","log","Loader","axios","API_KEY","LANGUAGE","getTrendingMovies","params","api_key","language","data","page","getMovieById","movieId","getMovieCredits","getMovieReviews"],"sourceRoot":""}