{"version":3,"file":"static/js/680.15c8e200.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/HomePage/HomePage.jsx","services/themoviedbApi.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const ContainerMovieList = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 16px;\n  padding-bottom: 24px;\n  background-color: ${props => props.theme.colors.backgroundPrimary};\n  list-style-type: none;\n  @media (min-width: 768px) {\n    grid-template-columns: 1fr 1fr;\n  }\n  @media (min-width: 1280px) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n`;\n\nexport const MovieListContainerItem = styled.li`\n  width: 90%;\n  padding: 5px;\n  border-radius: 2px;\n  font-weight: bald;\n\n  background-color: ${props => props.theme.colors.middleAccent};\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  text-decoration: none;\n`;\n\nexport const MovieListTitle = styled.h2`\n  display: flex;\n  justify-content: center;\n\n  text-shadow: ${props => {\n    return ` 0 1px 1px ${props.theme.colors.secondaryAccent}`;\n  }};\n`;\n\nexport const MovieListItemLink = styled(Link)`\n  font-size: 25px;\n  font-weight: bald;\n  color: ${props => props.theme.colors.primaryBlack}; ;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { MovieListTitle, ContainerMovieList, MovieListContainerItem, MovieListItemLink } from './MovieList.styled';\n\nexport const MovieList = ({ movies, title }) => {\n  const location = useLocation();\n\n  return (\n    <div>\n      {title && <MovieListTitle>{title}</MovieListTitle>}\n      <ContainerMovieList>\n        {movies?.length &&\n          movies.map(movie => {\n            return (\n              <MovieListContainerItem key={movie.id}>\n                <MovieListItemLink to={`/movies/${movie.id}`} state={{ from: location }}>\n                  {movie.title}\n                </MovieListItemLink>\n              </MovieListContainerItem>\n            );\n          })}\n      </ContainerMovieList>\n    </div>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.number.isRequired })\n  ).isRequired,\n};\n\nexport default MovieList;\n","import React, { useState, useEffect } from 'react';\nimport { getTrendingMovies } from '../../services/themoviedbApi';\n\nimport { MovieList } from 'components/MovieList/MovieList';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const HomePage = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getTrendingMoviesFromApi = async () => {\n      try {\n        setIsLoading(true);\n        const response = await getTrendingMovies();\n        setTrendingMovies(response.results);\n        console.log(response.results);\n      } catch (error) {\n        setError(error.message);\n        console.log('getTrendingMovies error:', error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getTrendingMoviesFromApi();\n  }, []);\n\n  console.log(\"Homepage error:\", error);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n\n      {error && <p>HOMEPAGE Something went wrong! Please try again!</p>}\n\n      <MovieList movies={trendingMovies} title={'Trending today'} />\n    </div>\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'f687d24021b781b06892bcf3760eb617';\nconst LANGUAGE = 'en-US';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day`, {\n    params: { api_key: API_KEY, language: LANGUAGE, },\n  });\n\n  console.log('getTrendingMovies:', response);\n  const { data } = response;\n\n  return data;\n};\n\nexport const getMovieByQuery = async (query, page = 1) => {\n    const response = await axios.get(`/search/movie`, {\n      params: { api_key: API_KEY, language: LANGUAGE, page, query, },\n    });\n  \n    console.log('getMovieById response:', response);\n    const { data } = response;\n    return data;\n  };\n\nexport const getMovieById = async movieId => {\n    const response = await axios.get(`/movie/${movieId}`, {\n      params: { api_key: API_KEY, language: LANGUAGE},\n    });\n  \n    console.log('getMovieById response:', response);\n    const { data } = response;\n    return data;\n  };\n\nexport const getMovieCredits = async movieId => {\n    const response = await axios.get(`/movie/${movieId}/credits`, {\n      params: { api_key: API_KEY, language: LANGUAGE, },\n    });\n  \n    console.log('getMovieCredits response:', response);\n    const { data } = response;\n    return data;\n  };\n\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, {\n    params: { api_key: API_KEY, language: LANGUAGE, page: 1 },\n  });\n\n  console.log('getMovieReviews response:', response);\n  const { data } = response;\n  return data;\n  // console.log(\"getMovieReviews data:\", data);\n  // console.log(data);\n};\n"],"names":["ContainerMovieList","styled","props","theme","colors","backgroundPrimary","MovieListContainerItem","middleAccent","MovieListTitle","secondaryAccent","MovieListItemLink","Link","primaryBlack","MovieList","movies","title","location","useLocation","length","map","movie","to","id","state","from","HomePage","useState","trendingMovies","setTrendingMovies","isLoading","setIsLoading","error","setError","useEffect","getTrendingMoviesFromApi","getTrendingMovies","response","results","console","log","message","axios","API_KEY","LANGUAGE","params","api_key","language","data","getMovieByQuery","query","page","getMovieById","movieId","getMovieCredits","getMovieReviews"],"sourceRoot":""}