{"version":3,"file":"static/js/779.b274363d.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/themoviedbApi.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewListContainer = styled.ul`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  gap: 16px;\n  padding-left: 20px;\n  padding-right: 20px;\n  padding-bottom: 24px;\n  background-color: ${props => props.theme.colors.backgroundPrimary};\n  list-style-type: none;\n  @media (min-width: 768px) {\n    grid-template-columns: 1fr 1fr;\n  }\n  @media (min-width: 1280px) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n`;\n\nexport const ReviewListContainerItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 90%;\n  //   padding-top: 0;\n  padding-left: 20px;\n  padding-right: 20px;\n  padding-bottom: 20px;\n  border-radius: 2px;\n  font-weight: bald;\n\n  background-color: ${props => props.theme.colors.middleAccent};\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  text-decoration: none;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from '../../services/themoviedbApi';\n\nimport { Loader } from 'components/Loader/Loader';\n\nimport { ReviewListContainer, ReviewListContainerItem } from './Reviews.styled';\n\n\nconst Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState([]);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const getMovieReviewsFromApi = async movieId => {\n      try {\n        setIsLoading(true);\n        const response = await getMovieReviews(movieId);\n        // setMovieById(response.results);\n        setMovieReviews(response.results);\n      } catch (error) {\n        setError(error.message);\n        console.log('getMovieReviews:', error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovieReviewsFromApi(movieId);\n  }, [movieId]);\n\n  console.log(movieId);\n  console.log('movieReviews:', movieReviews);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n\n      {error && <p>Something went wrong! Please try again!</p>}\n\n      {movieReviews.length === 0 && <p>No reviews found</p>}\n      <ReviewListContainer>\n        {movieReviews.length > 0 &&\n          movieReviews.map(review => {\n            return (\n              <ReviewListContainerItem key={review.id}>\n                <h4>Review by: {review.author}</h4>\n                <p>{review.content}</p>\n              </ReviewListContainerItem>\n            );\n          })}\n      </ReviewListContainer>\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'f687d24021b781b06892bcf3760eb617';\nconst LANGUAGE = 'en-US';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day`, {\n    params: { api_key: API_KEY, language: LANGUAGE, },\n  });\n\n  console.log('getTrendingMovies:', response);\n  const { data } = response;\n\n  return data;\n};\n\nexport const getMovieByQuery = async (query, page = 1) => {\n    const response = await axios.get(`/search/movie`, {\n      params: { api_key: API_KEY, language: LANGUAGE, page, query, },\n    });\n  \n    console.log('getMovieById response:', response);\n    const { data } = response;\n    return data;\n  };\n\nexport const getMovieById = async movieId => {\n    const response = await axios.get(`/movie/${movieId}`, {\n      params: { api_key: API_KEY, language: LANGUAGE},\n    });\n  \n    console.log('getMovieById response:', response);\n    const { data } = response;\n    return data;\n  };\n\nexport const getMovieCredits = async movieId => {\n    const response = await axios.get(`/movie/${movieId}/credits`, {\n      params: { api_key: API_KEY, language: LANGUAGE, },\n    });\n  \n    console.log('getMovieCredits response:', response);\n    const { data } = response;\n    return data;\n  };\n\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, {\n    params: { api_key: API_KEY, language: LANGUAGE, page: 1 },\n  });\n\n  console.log('getMovieReviews response:', response);\n  const { data } = response;\n  return data;\n  // console.log(\"getMovieReviews data:\", data);\n  // console.log(data);\n};\n"],"names":["ReviewListContainer","styled","props","theme","colors","backgroundPrimary","ReviewListContainerItem","middleAccent","useState","movieReviews","setMovieReviews","movieId","useParams","isLoading","setIsLoading","error","setError","useEffect","getMovieReviewsFromApi","getMovieReviews","response","results","message","console","log","Loader","length","map","review","author","content","id","axios","API_KEY","LANGUAGE","getTrendingMovies","params","api_key","language","data","getMovieByQuery","query","page","getMovieById","getMovieCredits"],"sourceRoot":""}